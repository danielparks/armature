#!/usr/bin/env ruby

require 'gli'
require 'armature'
require 'logging'

include GLI::App

program_desc 'Deploy Puppet environments and manage modules'
version Armature::VERSION
subcommand_option_handling :normal
arguments :strict

@logger = Logging.logger['armature']
Logging.logger.root.level = :warn

desc 'Show INFO level output'
switch [:v,:verbose]

desc 'Show DEBUG level output'
switch [:d,:debug]

desc 'Add timestamp for each line in log'
switch [:"log-time"]

if Process.uid == 0
  environments_default = '/etc/puppetlabs/code/environments'
  cache_default = '/srv/armature-cache'
else
  environments_default = "#{ENV['HOME']}/.puppetlabs/etc/code/environments"
  cache_default = "#{ENV['HOME']}/.armature/cache"
end

desc 'Path to the environments directory'
default_value environments_default
arg_name 'DIR'
flag [:e,:environments]

desc 'Path to armature cache'
default_value cache_default
arg_name 'DIR'
flag [:c,:cache]

desc 'Deploy a ref as an environment'
arg 'GIT_URL'
arg 'REF'
arg 'NAME'
command "deploy-ref" do |c|
  c.action do |global_options, options, arguments|
    # This should fail as early as possible (e.g. if the path isn't correct)
    environments = Armature::Environments.new(@environments_path, @cache)

    repo = Armature::Repo::Git.from_url(@cache, arguments.shift)
    ref = arguments.shift
    name = arguments.shift

    begin
      environments.check_out_ref(repo, ref, name)
    rescue
      @logger.error("Error deploying ref '#{ref}' as '#{name}'")
      raise
    end
  end
end

desc 'Deploy branches as environments'
long_desc 'This accepts globs to match branch names. For example, specify "*"
  to deploy all branches.'
arg 'GIT_URL'
arg 'BRANCH', :multiple=>true
command "deploy-branches" do |c|
  c.desc "Delete environments that aren't being deployed"
  c.switch [:d,"delete-other"]
  c.desc "Fix environment names instead of skipping them"
  c.switch [:x,"fix-environment-names"]
  c.action do |global_options, options, arguments|
    # This should fail as early as possible (e.g. if the path isn't correct)
    environments = Armature::Environments.new(@environments_path, @cache)
    environments.fix_environment_names = options["fix-environment-names"]

    repo = Armature::Repo::Git.from_url(@cache, arguments.shift)
    all_branches = repo.get_branches()
    branches = Set.new()

    arguments.each do |glob|
      found = all_branches.select do |branch|
        File.fnmatch(glob, branch, File::FNM_PATHNAME)
      end

      if found.empty?
        @logger.warn("No branches match '#{glob}'")
      else
        branches.merge(found)
      end
    end

    if options["delete-other"]
      (Set.new(environments.names()) - branches).each do |name|
        environments.remove(name)
      end
    end

    branches.each do |branch|
      begin
        environments.check_out_ref(repo, branch)
      rescue => e
        @logger.error("Error deploying branch '#{branch}' (skipping): #{e}")
      end
    end
  end
end

desc 'Deploy ./Puppetfile into ./modules'
long_desc 'By default this deploys the Puppetfile in the current directory into
  ./modules.

  You may specify another directory to use instead of the current directory.
  It\'s equivalent to cding into the other directory and then running
  `armature deploy-puppetfile`.'
arg 'SOURCE-DIRECTORY', :optional
command "deploy-puppetfile" do |c|
  c.action do |global_options, options, arguments|
    @cache.lock File::LOCK_SH do
      puppetfile = Armature::Puppetfile.new(@cache)

      source_directory = arguments[0] || "."
      if ! puppetfile.load_control_directory(source_directory)
        abort() # A warning is displayed in load_control_directory()
      end

      puppetfile.update_modules(source_directory)
    end
  end
end

desc 'Remove unused objects from cache'
command :gc do |c|
  c.action { @cache.garbage_collect(@environments_path) }
end

desc 'Update all branches in the cache'
command :update do |c|
  c.action { @cache.update_mutable_refs() }
end

pre do |global_options, command, options, arguments|
  appender = Logging.appenders.stdout

  if global_options[:"log-time"]
    appender.layout = Logging.layouts.pattern.new(
      :pattern =>  "%d %-5l [%c] %m\n",
      :date_pattern =>  "%Y-%m-%d %H:%M:%S",
    )
  end

  Logging.logger.root.add_appenders(appender)

  Logging.logger.root.level = :info if global_options[:verbose]
  Logging.logger.root.level = :debug if global_options[:debug]

  # Don't log all the git commands
  Logging.logger["Armature::Run"].level = :info if global_options[:debug]

  @logger.debug "Using environments directory '#{global_options[:environments]}'"
  @logger.debug "Using cache directory '#{global_options[:cache]}'"

  @environments_path = global_options[:environments]
  @cache = Armature::Cache.new(global_options[:cache])

  true
end

on_error do |exception|
  if exception.is_a? SystemExit
    raise
  end
  @logger.error(exception)
end

exit run(ARGV)
