#!/usr/bin/env ruby

require 'gli'
require 'gofer'
require 'logging'

include GLI::App

program_desc 'deploy Puppet environments and manage modules'
version Gofer::VERSION
subcommand_option_handling :normal
arguments :strict

@logger = Logging.logger['gofer']
Logging.logger.root.level = :warn

desc 'Show INFO level output'
switch [:v,:verbose]

desc 'Show DEBUG level output'
switch [:d,:debug]

if Process.uid == 0
  environments_default = '/etc/puppetlabs/code/environments'
  cache_default = '/srv/gofer-cache'
else
  environments_default = "#{ENV['HOME']}/.puppetlabs/etc/code/environments"
  cache_default = "#{ENV['HOME']}/.gofer/cache"
end

desc 'Path to the environments directory'
default_value environments_default
arg_name 'DIR'
flag [:e,:environments]

desc 'Path to gofer cache'
default_value cache_default
arg_name 'DIR'
flag [:c,:cache]

desc 'Deploy a repo into environments based on branches'
long_desc 'This accepts globs to match branch names. For example, specify "*"
  to deploy all branches.'
arg 'GIT_URL'
arg 'BRANCH', :multiple=>true
command "deploy-branch" do |c|
  c.desc "Delete environments that we aren't deploying"
  c.switch [:d,"delete-old"]
  c.action do |global_options, options, arguments|
    repo = @cache.get_repo(arguments.shift)
    environments = Gofer::Environments.new(@environments_path, @cache)

    all_branches = repo.get_branches()
    branches = Set.new()

    arguments.each do |glob|
      found = all_branches.select do |branch|
        File.fnmatch(glob, branch, File::FNM_PATHNAME)
      end

      if found.empty?
        @logger.warn("No branches match '#{glob}'")
      else
        branches.merge(found)
      end
    end

    if options["delete-old"]
      (Set.new(environments.names()) - branches).each do |name|
        environments.remove(name)
      end
    end

    branches.each do |branch|
      begin
        environments.checkout_ref(repo, branch)
      rescue => e
        @logger.error("Error deploying branch '#{branch}' (skipping): #{e}")
      end
    end
  end
end

desc 'Remove unused objects from cache'
command :gc do |c|
  c.action { @cache.garbage_collect(@environments_path) }
end

desc 'Update branches to latest revisions'
command :update do |c|
  c.action { @cache.update_branches() }
end

pre do |global_options, command, options, arguments|
  Logging.logger.root.add_appenders Logging.appenders.stdout

  Logging.logger.root.level = :info if global_options[:verbose]
  Logging.logger.root.level = :debug if global_options[:debug]

  # Don't log all the git commands
  Logging.logger["Gofer::Run"].level = :info if global_options[:debug]

  @logger.debug "Using environments directory '#{global_options[:environments]}'"
  @logger.debug "Using cache directory '#{global_options[:cache]}'"

  @environments_path = global_options[:environments]
  @cache = Gofer::Cache.new(global_options[:cache])

  true
end

on_error do |exception|
  @logger.error(exception)
end

exit run(ARGV)
